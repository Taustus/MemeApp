@page "/nice_memes/"
@inject HttpClient Http

<div>
    @if (UserInfo.likedImages.Count == 0)
    {
        <p style="text-align: center; font-size:large">No saved memes...</p>
        <p style="text-align: center; font-size:x-large; color: red">REALLY??</p>
    }
    else
    {
        for (int i = 0; i < UserInfo.likedImages.Count; i++)
        {
            <div class="image_row">
                <div class="image_big_container">
                    <div class="@(i + 1 < UserInfo.likedImages.Count ? "image_small_container_left" : "image_small_container_center")">
                        <img class="image_in_small_container" src="meme_folder/@(UserInfo.likedImages[i]).jpg">
                        <span num="@i" class="icon_active" @onclick="@(async (e) => await UnlikeMeme(e))"></span>
                    </div>
                    @if (i + 1 < UserInfo.likedImages.Count)
                    {
                        <div class="image_small_container_right">
                            <img class="image_in_small_container" src="meme_folder/@(UserInfo.likedImages[++i]).jpg">
                            <span num="@(i)" class="icon_active" @onclick="@(async (e) => await UnlikeMeme(e))"></span>
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>


@code {

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    protected async Task UnlikeMeme(MouseEventArgs e)
    {
        var result = await JSRuntime.InvokeAsync<string>("getElementNumber", new double[] { e.ClientX, e.ClientY });
        int.TryParse(result, out int i);
        UserInfo.likedImages.RemoveAt(i);
    }
}
